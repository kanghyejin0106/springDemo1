[스프링 프레임워크?]
스프링은 엔터프라이즈 어플리케이션에서 필요로하는 여러가지 기능들을 제공하는 프레임워크.
J2E가 제공하는 기능들을 스프링에서 지원을 하고 있기 때문에 국내에선 가장 인기있는 프레임워크로 자리잡았다.
스프링은 J2E에서 제공하는 기능 외 DI나 AOP같은 기능을 지원한다.
특징 : *스프링은 EJB에 비해 가벼운 경량의 프레임워크이다. 자바의 객체를 담고있는 컨테이너. 
	객체의 생성, 소멸과같은 생명주기를 관리한다. 
	*DI의존성주입 지원한다. ex) A가 B를 상속받아 B의 메소드 사용한다 => A가 B에 의존한다.
	B의 메소드가 변경되면 A의 메소드도 변경된다. 이게 종속관계이고 이걸 해결하는 게 DI. 
	객체를 외부에서 만들어서 주입시키는 방법. 설정파일을 통해 의존관계를 설정해주는 패턴. 
	*AOP를 지원한다. Aspect Oriented Programming
	트랜잭션, 로그처리, 보안같은 엔터프라이즈에서 필요로하는 기능들을 따로 모아둔 것. 
	각각의 모듈에 적용할수있도록 해준다. 
	*스프링은 POJO(Plain Old Java Object)를 지원한다. 
	특정 인터페이스나 클래스를 상속받지 않는 순수한 자바객체를 컨테이너가 담고있다가 
	조립하듯이 꺼내 사용한다.
	*트랜잭션 처리를 위한 일관된 방식을 제공한다.
	*영속성과 관련된 다양한 API를 제공한다. JDBC, IBatis, MyBatis, JPA, Hibernate등과
	같은 프레임워크와 연동 지원한다.
	
	
[DI : Dependency Injection]
스프링의 핵심 개념 중 하나. 의존관계 설정해주는 파일이 beam.xml 파일이다. 아니면 어노테이션 이용.
객체사이의 의존관계를 객체 자신이 아닌 외부의(컨테이너)에서 수행하는 개념.

//AA에서 BB객체를 생성
public class AA {
	BB bb = new BB();
	
	public void print() {
		bb.aa();
	}
}

public class BB {
	public void aa() {
		System.out.println("BB의 aa() method");
	}
}
AA has BB. AA는 BB에 의존한다. 상당히 종속적일수밖에 없다.
그렇다면 DI는 의존객체에 대한 획득을 클래스에서 하지 않고 스프링 컨테이너가 제공해준다. 
AA클래스에서 BB bb = new BB();라는 코드를 사용하지 않고 
컨테이너가 만들어둔 BB클래스의 인스턴스(bean)를 주입받는다. 
인터페이스를 이용한 의존성을 낮춘다. 
25:30남음

